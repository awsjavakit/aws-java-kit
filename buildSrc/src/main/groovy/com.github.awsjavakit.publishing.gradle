plugins {
    id 'maven-publish'
    id 'signing'
}

java {
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options.addBooleanOption('Xdoclint:none', true)
}


publishing {


    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.name
                description = 'AWS Java kit'
                url = 'https://github.com/awsjavakit/aws-java-kit'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://github.com/awsjavakit/aws-java-kit'
                    }
                }
                developers {
                    developer {
                        id = 'axthosarouris'
                        name = 'Orestis Gkorgkas'
                        email = 'orestis.gorgas@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/awsjavakit/aws-java-kit.git'
                    developerConnection = 'scm:git:git://github.com/awsjavakit/aws-java-kit.git'
                    url = "https://github.com/awsjavakit-media/aws-java-kit"
                }
            }
        }
    }

}

static def should_sign_release() {
    return isMainBranch()
}

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

static def isMainBranch() {
    def branch = gitBranch()
    return (branch == "main")
}

signing {
    if (should_sign_release()) {
        def signingKey = findProperty("signing_key")
        def signingPassword = findProperty("signing_password")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }

}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
